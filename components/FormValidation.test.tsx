import React from "react";
import "@testing-library/jest-dom";
import { render, fireEvent, screen } from "@testing-library/react";
import FormValidation from "./ChakraFormik";

test("renders form properly", () => {
  render(<FormValidation />);
  const nameLabel = screen.getByText(/Full Name/i);
  const emailLabel = screen.getByText(/Email/i);
  const phoneLabel = screen.getByText(/Phone No/i);
  const addressLabel = screen.getByText(/Address/i);
  const panLabel = screen.getByText(/Pan No/i);
  const aadharLabel = screen.getByText(/Aadhar No/i);
  const dobLabel = screen.getByText(/Date-Of-Birth/i);
  const pobLabel = screen.getByText(/Place of birth/i);
  expect(nameLabel).toBeInTheDocument();
  expect(emailLabel).toBeInTheDocument();
  expect(phoneLabel).toBeInTheDocument();
  expect(addressLabel).toBeInTheDocument();
  expect(panLabel).toBeInTheDocument();
  expect(aadharLabel).toBeInTheDocument();
  expect(dobLabel).toBeInTheDocument();
  expect(pobLabel).toBeInTheDocument();
  const nameInput = screen.getByLabelText(/Full Name/i);
  expect(nameInput).toBeInTheDocument();
});
test("btn should be disabled for empty input field", () => {
  const { getByLabelText, getByRole } = render(<FormValidation />);
  const nameInput = getByLabelText(/Full Name/i);
  const emailInput = screen.getByLabelText(/Email/i);
  const phoneInput = screen.getByLabelText(/Phone No/i);
  const addressInput = screen.getByLabelText(/Address/i);
  const panInput = screen.getByLabelText(/Pan No/i);
  const aadharInput = screen.getByLabelText(/Aadhar No/i);
  const dobInput = screen.getByLabelText(/Date-Of-Birth/i);
  fireEvent.change(nameInput, { target: { value: "" } });
  fireEvent.change(emailInput, { target: { value: "" } });
  fireEvent.change(phoneInput, { target: { value: "" } });
  fireEvent.change(addressInput, { target: { value: "" } });
  fireEvent.change(panInput, { target: { value: "" } });
  fireEvent.change(aadharInput, { target: { value: "" } });
  fireEvent.change(dobInput, { target: { value: "" } });
  const btn = getByRole("button", { name: "Submit" });
  fireEvent.click(btn);
  btn.setAttribute("disabled", "true");
  expect(btn).toHaveAttribute("disabled");
});

test("btn should be enabled for non-empty input field", () => {
  const { getByLabelText, getByRole, debug } = render(<FormValidation />);
  const nameInput = getByLabelText(/Full Name/i);
  const emailInput = screen.getByLabelText(/Email/i);
  const phoneInput = screen.getByLabelText(/Phone No/i);
  const addressInput = screen.getByLabelText(/Address/i);
  const panInput = screen.getByLabelText(/Pan No/i);
  const aadharInput = screen.getByLabelText(/Aadhar No/i);
  const dobInput = screen.getByLabelText(/Date-Of-Birth/i);
  fireEvent.change(nameInput, { target: { value: "" } });
  fireEvent.change(emailInput, { target: { value: "" } });
  fireEvent.change(phoneInput, { target: { value: "" } });
  fireEvent.change(addressInput, { target: { value: "" } });
  fireEvent.change(panInput, { target: { value: "" } });
  fireEvent.change(aadharInput, { target: { value: "" } });
  fireEvent.change(dobInput, { target: { value: "" } });
  const btn = getByRole("button", { name: "Submit" });
  fireEvent.click(btn);
  btn.setAttribute("disabled", "true");
  expect(btn).toHaveAttribute("disabled");
  debug(btn);
  fireEvent.change(nameInput, { target: { value: "Safwan" } });
  fireEvent.change(emailInput, { target: { value: "example@gmail.com" } });
  fireEvent.change(phoneInput, { target: { value: "1234567890" } });
  fireEvent.change(addressInput, { target: { value: "B sector " } });
  fireEvent.change(panInput, { target: { value: "AAAAA1234A" } });
  fireEvent.change(aadharInput, { target: { value: "1234-1234-1234" } });
  fireEvent.change(dobInput, { target: { value: "5-4-1998" } });
  btn.removeAttribute("disabled");
  debug(btn);
  expect(btn).not.toHaveAttribute("disabled");
});
